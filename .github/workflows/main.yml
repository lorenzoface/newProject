name: first deploy
run-name: ${{ github.actor }} is doing a ${{ github.event_name}} from ${{ github.event.pull_request.head.ref }} to ${{ github.event.pull_request.base.ref }}
# Definition when the workflow should run
on:
    #push
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "develop". 
      branches: [ main, SIT]
      # We only care about changes to the force-app directory, which is the root directory of the sfdx project. 
      #paths:
        #- 'force-app/**'
        
# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-develop-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v3
              with:
                node-version: '14'
                
        # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

        # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
                  
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 
            #- name: 'Installing java'
            # run: |
            #    sudo apt-get update
            #    sudo apt install default-jdk
        
         # The URL is stored in the Github Secret named SFDX_INTEGRATION_URL
            # so here we store the URL into a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt
        # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration


        # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "origin/${{ github.event.pull_request.base.ref }}" --from "origin/${{ github.event.pull_request.head.ref }}" --output changed-sources/ --generate-delta --source force-app 
                  echo "Delta identified:"
                  cat changed-sources/package/package.xml
        # Run basic deploy
            - name: 'Check-only deploy delta changes - run specified tests'
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --json --checkonly --testlevel RunLocalTests  --json
